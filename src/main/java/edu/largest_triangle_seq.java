/**
    This program is the representation of a sequential algorithm designed to
    compute the largest triangle formed from a set of random points. Each point
    is represented in a planar system with x and y coordinated, and combinations
    of three points are examined to deternime the set with the largest area.

    Course: CSCI 654 - Foundations of Parallel Computing

    @author Kevin Assogba (kta7930)
*/

import java.util.*;

public class largest_triangle_seq
{
    Point[] points;
    TreeMap<Double, triangle> large_triangle = new TreeMap<Double, triangle>();
    triangle[] Large = new triangle[10];
    static boolean flag = false;
    static int counter;
    static double max;
    static Point node_a, node_b, node_c;
    static int[] indices;


    /**
    * This main function retrieves the points generated by the random class and
    * launches the computation of the triangles areas.
    *
    * @param args   command line arguments
    *
    */
    public static void main( String[] args )
    {
        long start = System.currentTimeMillis();
        // Read inputs from arguments
        int numPoints = Integer.valueOf(args[0]);
        int side = Integer.valueOf(args[1]);
        int seed = Integer.valueOf(args[2]);

        largest_triangle_seq lgst_tri_seq = new largest_triangle_seq();

        // start computations
        lgst_tri_seq.get_points(numPoints, side, seed);
        lgst_tri_seq.get_triangle(numPoints);
        float sec = (System.currentTimeMillis() - start) / 1000F;
        System.out.println("largest_triangle_seq : " + sec + " seconds");
    }

    /**
    * This function creates an instance of random points and iterates through
    * the points in order to store their references in an array.
    *
    * @param numPoints   number of random point to generate
    * @param side   limits of the plane
    * @param seed   seed used to maintain constance in the generation
    *
    */
    public void get_points(int numPoints, int side, int seed)
    {
        // Build a random points set
        RandomPoints rndPoints = new RandomPoints(numPoints, side, seed);
        points = new Point[numPoints];
        int iter = 0;
        Point p;
        while(rndPoints.hasNext()) {
            p = rndPoints.next();
            points[iter++] = p;
        }
    }

    /**
    * This function initiates loops to obtain indices of the points forming
    * a given triangle, computes the area, and check against the max area value
    * to verify if it is the largest.
    *
    * @param numPoints   number of random point to generate
    *
    */
    public void get_triangle(int numPoints)
    {
        for(int idx_one = 1; idx_one < numPoints - 1; idx_one++) {

            for (int idx_two = idx_one + 1; idx_two < numPoints; idx_two++) {

                for (int idx_tri = idx_two + 1; idx_tri <= numPoints; idx_tri++) {

                    int[] comb = {idx_one, idx_two, idx_tri};
                    Point node_one = points[idx_one - 1];
                    Point node_two = points[idx_two - 1];
                    Point node_tri = points[idx_tri - 1];

                    triangle abc = new triangle(node_one, node_two, node_tri, comb);

                    if (abc.is_largest()) {

                        mark_triangle(abc);
                    }
                }
            }
        }
        print_result();
    }

    /**
    * This function marks a triangle as largest if its area is larger than
    * those of already examined triangles. In other words, this function updates
    * the values of the maximum area, the corresponding triangle indices and
    * the coodinates of those points.
    *
    * @param aTriangle   currently the largest triangle found
    *
    */
    public void mark_triangle(triangle aTriangle)
    {
        max = aTriangle.get_area();
        indices = aTriangle.get_indices();
        node_a = aTriangle.a;
        node_b = aTriangle.b;
        node_c = aTriangle.c;
    }

    /**
    * This function is used to print the characteristics
    * of the largest triangle
    *
    */
    public void print_result()
    {
        System.out.printf ("%d %.5g %.5g%n", indices[0],
                                        node_a.getX(), node_a.getY());
        System.out.printf ("%d %.5g %.5g%n", indices[1],
                                        node_b.getX(), node_b.getY());
        System.out.printf ("%d %.5g %.5g%n", indices[2],
                                        node_c.getX(), node_c.getY());
        System.out.printf("%.5g%n", max);

    }
}
